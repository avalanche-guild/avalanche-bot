"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const _ = require("lodash");
const mockery = require("mockery");
const sinon = require("sinon");
let command;
let gamble;
ava_1.default.before(() => {
    // must register mocks before importing other modules
    mockery.registerMock('../lib/stats', {
        fetch: sinon.stub().returns({}),
        save: sinon.stub(),
    });
    mockery.enable({
        warnOnUnregistered: false,
    });
    const module = require('./gamble');
    command = module.command;
    gamble = module.gamble;
});
ava_1.default.after(() => {
    mockery.deregisterAll();
    mockery.disable();
});
const gamemaster = {
    id: '118415403272634369',
    username: 'Volkner',
};
const player = {
    id: '2',
    username: 'Zaahn',
};
ava_1.default.beforeEach((t) => {
    gamble.currentGame = null;
    t.context.channelSendStub = sinon.stub();
    t.context.channel = {
        id: 10,
        name: 'mock-channel',
        send: t.context.channelSendStub,
    };
});
ava_1.default('Does nothing on nonexistant command', async (t) => {
    await command({
        command: 'banana',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    t.is(t.context.channelSendStub.callCount, 0);
});
ava_1.default('Can\'t do other commands without a game started', async (t) => {
    await command({
        command: 'roll',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    t.is(t.context.channelSendStub.callCount, 0);
});
ava_1.default('Must play in a channel', async (t) => {
    delete t.context.channel.name;
    await command({
        command: 'gamble',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.is(callArg, 'You must play this game in a channel');
});
ava_1.default('Must specify a max amount', async (t) => {
    await command({
        command: 'gamble',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.regex(callArg, /You must specify the max amount to roll/);
});
ava_1.default('Max amount must be an integer, not a string', async (t) => {
    await command({
        command: 'gamble',
        args: ['banana'],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.regex(callArg, /The max amount must be an integer/);
});
ava_1.default('Max amount must be an integer, not a float', async (t) => {
    await command({
        command: 'gamble',
        args: ['5.245'],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.regex(callArg, /The max amount must be an integer/);
});
ava_1.default('Starts game with correct input', async (t) => {
    await startGame(t);
});
ava_1.default('Only one game in this channel', async (t) => {
    await startGame(t);
    await command({
        command: 'gamble',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.is(callArg, 'A game is already on-going in <#10>');
});
ava_1.default('Only one game globally', async (t) => {
    await startGame(t);
    t.context.channel = {
        id: 11,
        name: 'mock-channel-2',
        send: t.context.channelSendStub,
    };
    await command({
        command: 'gamble',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.is(callArg, 'A game is already on-going in <#10>');
});
ava_1.default('Won\'t let you play without at least 2 people', async (t) => {
    await startGame(t);
    await command({
        command: 'play',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.regex(callArg, /only 0 have entered/);
});
ava_1.default('Will allow you to withdraw', async (t) => {
    await startGame(t);
    t.is(_.size(gamble.currentGame.players), 0);
    await command({
        command: 'enter',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    t.is(_.size(gamble.currentGame.players), 1);
    await command({
        command: 'withdraw',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    t.is(_.size(gamble.currentGame.players), 0);
});
ava_1.default('Can cancel the game', async (t) => {
    await startGame(t);
    await command({
        command: 'cancel',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.is(callArg, 'Game cancelled.');
    t.is(gamble.currentGame, null);
});
ava_1.default('Only gamemaster can cancel the game', async (t) => {
    await startGame(t);
    await command({
        command: 'cancel',
        args: [],
        author: player,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.is(callArg, 'Only <@118415403272634369> can cancel the game.');
    t.not(gamble.currentGame, null);
});
ava_1.default('Only gamemaster can start the game', async (t) => {
    await startGame(t);
    await command({
        command: 'play',
        args: [],
        author: player,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.is(callArg, '<@2> Only <@118415403272634369> can start the roll.');
    t.not(gamble.currentGame, null);
});
ava_1.default('Can\'t start rolling until the gamemaster says so', async (t) => {
    await startGame(t);
    await command({
        command: 'roll',
        args: [],
        author: player,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.regex(callArg, /you can't roll until/);
});
ava_1.default('Can start the rolls after 2 people have entered', async (t) => {
    await startGame(t);
    await startRolling(t);
});
ava_1.default('Can\'t enter after rolling has started', async (t) => {
    await startGame(t);
    await startRolling(t);
    await command({
        command: 'enter',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.regex(callArg, /you can't enter/);
});
ava_1.default('Can\'t withdraw after rolling has started', async (t) => {
    await startGame(t);
    await startRolling(t);
    await command({
        command: 'withdraw',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.regex(callArg, /you can't withdraw/);
});
ava_1.default('The proper pot amount is implied with `!roll`', async (t) => {
    await startGame(t);
    await startRolling(t);
    await command({
        command: 'roll',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.regex(callArg, /<@118415403272634369> rolled a \d{1,3}/);
});
ava_1.default('Must roll the correct amount', async (t) => {
    await startGame(t);
    await startRolling(t);
    await command({
        command: 'roll',
        args: ['1000'],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.regex(callArg, /you must roll out of 500/);
});
ava_1.default('Can\'t roll twice', async (t) => {
    await startGame(t);
    await startRolling(t);
    await command({
        command: 'roll',
        args: ['500'],
        author: gamemaster,
        channel: t.context.channel,
    });
    const roll = gamble.currentGame.players[gamemaster.id].roll;
    await command({
        command: 'roll',
        args: ['500'],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.regex(callArg, new RegExp(`<@${gamemaster.id}> you have already rolled a ${roll}!`));
});
ava_1.default('Prints who still needs to roll', async (t) => {
    await startGame(t);
    await startRolling(t);
    await command({
        command: 'roll',
        args: ['500'],
        author: gamemaster,
        channel: t.context.channel,
    });
    await command({
        command: 'play',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.regex(callArg, new RegExp(`Some people still need to roll:\n\n<@${player.id}>`));
});
ava_1.default('It\'s a critical hit!', async (t) => {
    await startGame(t, '9999');
    await startRolling(t);
    await command({
        command: 'roll',
        args: ['9999'],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.regex(callArg, /It's a critical hit!/);
    t.is(gamble.currentGame.players[gamemaster.id].roll, 9999);
});
ava_1.default('Determines the winner', async (t) => {
    await startGame(t);
    await startRolling(t);
    await command({
        command: 'roll',
        args: ['500'],
        author: gamemaster,
        channel: t.context.channel,
    });
    await command({
        command: 'roll',
        args: ['500'],
        author: player,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.regex(callArg, /<@(2|118415403272634369)> owes <@(2|118415403272634369)> \d{1,3} gold/);
});
async function startGame(t, max = '500') {
    await command({
        command: 'gamble',
        args: [max],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.regex(callArg, /@here \*\*Let's gamble!\*\* :moneybag: Playing for [\d,]+ gold/);
}
async function startRolling(t) {
    await command({
        command: 'enter',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    await command({
        command: 'enter',
        args: [],
        author: player,
        channel: t.context.channel,
    });
    await command({
        command: 'play',
        args: [],
        author: gamemaster,
        channel: t.context.channel,
    });
    const callArg = t.context.channelSendStub.lastCall.args[0];
    t.regex(callArg, /\n\n\*\*Type `!roll [\d,]+` to roll\*\*/);
    t.true(gamble.currentGame.isRolling);
}
//# sourceMappingURL=data:application/json;base64,